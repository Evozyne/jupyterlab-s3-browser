name: CI

on: push
# on:
  # push:
    # branches: 'master'
  # schedule:
    # - cron: '0 0 * * *'

jobs:
  build:

    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install node
      uses: actions/setup-node@v1
      with:
       node-version: '14.x'
    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Setup pip cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: pip-3.9-${{ hashFiles('package.json') }}
        restore-keys: |
          pip-3.9-
          pip-
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: Setup yarn cache
      uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          yarn-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel twine setuptools packaging jupyterlab~=3.0 jupyter_packaging~=0.7.9
        jlpm
        # python -m pip install -e .[dev]

    - name: Create server extension # and pip install
      run: |
        jlpm run build:prod
        # jupyter labextension develop . --overwrite
        # pip install .[dev] && jupyter serverextension enable --py jupyterlab_s3_browser

    - name: Package extension
      run: |
        python setup.py sdist bdist_wheel
    - name: upload python dist
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist

    - name: upload typescript build
      uses: actions/upload-artifact@v2
      with:
        name: lib
        path: lib

    # TODO: move to publish.yml
    # - name: Publish a Python distribution to PyPI
      # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      # uses: pypa/gh-action-pypi-publish@master
      # with:
        # user: __token__
        # password: ${{ secrets.PYPI_API_TOKEN }}

    # - name: Publish labextension NPM
      # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      # uses: JS-DevTools/npm-publish@v1
      # with:
        # token: ${{ secrets.NPM_TOKEN }}
  test:
    needs: build
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        jupyterlab_version: ["2.*", "3.*"]
    steps:
    - uses: actions/checkout@v2
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v2
    - name: test
      run: ls && ls dist && ls lib
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: pip install jupyterlab==${{ matrix.jupyterlab_version }}
    - run: jupyter lab --version
    - run: pip install dist/*.whl

    - run: jupyter labextension install .
      if: ${{ matrix.jupyterlab_version == '2.*' }}

    - run: jupyter labextension list
    - run: jupyter serverextension list
    - uses: cypress-io/github-action@v2
      with:
        start: jupyter lab --no-browser --ServerApp.password='' --ServerApp.token=''
        # start: docker-compose up
        browser: chrome
        headless: true
        wait-on: "http://localhost:8888/lab"
        wait-on-timeout: 120
